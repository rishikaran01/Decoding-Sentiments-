import files
uploaded = files.upload()
Step 2: Load the Dataset 
import pandas as pd
df = pd.read_csv('annual.csv')
# Replace with your file name 
df.head()
# Step 3: Data Exploration

df.info()

df.describe()

df.columns
# Step 4: Check for Missing Values and Duplicates

print(df.isnull().sum())

print("Duplicates:", df.duplicated().sum())
import matplotlib.pyplot as plt

import seaborn as sns

# Replace 'Year' with the actual column name you want to plot

sns.histplot(df['Year'])

plt.show()

# Correlation matrix needs numerical data

numerical_df = df.select_dtypes(include=['number'])

sns.heatmap(numerical_df.corr(), annot=True)

plt.show()

# Replace 'Year' with the actual column name you want to plot

sns.histplot(df['Year'])

plt.show()

# Correlation matrix needs numerical data

numerical_df = df.select_dtypes(include=['number'])

sns.heatmap(numerical_df.corr(), annot=True)

plt.show()
# Step 6: Identify Target and Features

# Replace 'target_column' with the actual column name, for example 'Mean'

X = df.drop('Mean', axis=1)  # Changed 'target_column' to 'Mean'

y = df['Mean']  # Changed 'target_column' to 'Mean'

# Step 7: Convert Categorical Columns to Numerical

categorical_cols = X.select_dtypes(include=['object']).columns

print(categorical_cols)
# Step 8: One-Hot Encoding

X = pd.get_dummies(X, drop_first=True)

# Step 9: Feature Scaling

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()

X_scaled = scaler.fit_transform(X)

# Step 10: Train-Test Split

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0
# Step 11: Model Building

from sklearn.linear_model import LinearRegression

model = LinearRegression()

model.fit(X_train, y_train)
# Step 12: Evaluation

from sklearn.metrics import mean_squared_error, r2_score

y_pred = model.predict(X_test)

print("MSE:", mean_squared_error(y_test, y_pred))

print("R2 Score:", r2_score(y_test, y_pred))
# Step 13: Make Predictions from New Input

# Replace placeholders with actual numerical values

# Example:

value1 = 2010  # Replace with your desired input for Year

# value2 = 36 # Replace with your desired input for Total # This feature is 

value3 = 35.7 # Replace with your desired input for Mean

# new_data = [[value1, value2, value3]]  # Original line with 3 features

d t [[ l 1 l 3]] # M difi d li ith 2 f t t t h l

new_data = [[value1, value3]]  # Modified line with 2 features to match scal

scaled_data = scaler.transform(new_data)

print(model.predict(scaled_data))
# Step 14: Convert to DataFrame and Encode

new_df = pd.DataFrame(new_data, columns=X.columns)

new_df = pd.get_dummies(new_df, drop_first=True)

# Step 15: Predict the Final Grade

final_prediction = model.predict(new_df)

print("Final Prediction:", final_prediction)
Step 16: Deployment - Gradio App

!pip install gradio
# Step 17: Create a Prediction Function

def predict_performance(input1, input2, input3):

    data = [[input1, input2, input3]]

    scaled = scaler.transform(data)

    return model.predict(scaled)[0]
# Step 18: Create the Gradio Interface

import gradio as gr

iface = gr.Interface(fn=predict_performance,

                     inputs=[gr.Number(label="Input 1"), gr.Number(label="Input 2"

                     outputs="number")

iface.launch()
